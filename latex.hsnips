global
function math(context) {
    return context.scopes.some(s => s.startsWith("meta.math"));
}
endglobal

snippet jacobi "jacobi" iA
\\begin{pmatrix}\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_1}{\\partial ${2:x}_${3:n}}\\\\\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_2}{\\partial ${2:x}_${3:n}}\\\\\\vdots&\\vdots&\\ddots&\\vdots\\\\\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_1}&\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_2}&\\cdots&\\frac{\\partial ${1:f}_${3:m}}{\\partial ${2:x}_${3:n}}\\end{pmatrix}
endsnippet

context math(context)
snippet inv "inverse" Ai
^{-1}
endsnippet

// My Own
context math(context)
snippet ,, "Text Command" A
\text{$1}$0
endsnippet

snippet \\ "New Line" A
\\\\

endsnippet

context math(context)
snippet ~~ "similar" A
\sim
endsnippet

context math(context)
snippet << "much lower" A
\ll 
endsnippet

context math(context)
snippet >> "much greater" A
\gg
endsnippet

context math(context)
snippet `grad ` A
\nabla $1
endsnippet 

context math(context)
snippet abs wA
\mid $1 \mid
endsnippet

context math(context)
snippet := "Assignment Operator" A
\coloneqq 
endsnippet

context math(context)
snippet sum "Sum" i
\sum_{i=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

context math(context)
snippet argmin "Argmin" A
\arg \min_{$1} $0
endsnippet

context math(context)
snippet argmax "Argmax" A
\arg \max_{$1} $0
endsnippet

context math(context)
snippet ` lrn` A
\left( $1 \right)
endsnippet

context math(context)
snippet ` lrc` A
\left\{ $1 \right\\}
endsnippet 

context math(context)
snippet ` lrs` A
\left[ $1 \right]
endsnippet 

snippet dategreeting "Gives you the current date!"
Hello from your hsnip at ``rv = new Date().toDateString()``!
endsnippet

snippet box "Box" A
``rv = '┌' + '─'.repeat(t[0].length + 2) + '┐'``
│ $1 │
``rv = '└' + '─'.repeat(t[0].length + 2) + '┘'``
endsnippet

context math(context)
snippet // "Fraction simple" A
\frac{$1}{$2}$0
endsnippet

context math(context)
snippet `rd ` "Power with ()" A
^{($1)}$0
endsnippet

snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction no ()" A
\frac{``rv = m[1]``}{$1}$0
endsnippet

context math(context)
snippet ` abs ` "Absolute" A
\mid $1 \mid$0
endsnippet

context math(context)
snippet `^.*\)/` "Fraction with ()" A
``
    let str = m[0];
    str = str.slice(0, -1);
    let lastIndex = str.length - 1;

    let depth = 0;
    let i = str.length - 1;

    while (true) {
        if (str[i] == ')') depth += 1;
        if (str[i] == '(') depth -= 1;
        if (depth == 0) break;
        i -= 1;
    }

    let results = str.slice(0, i) + "\\frac{" + str.slice(i+1, -1) + "}";
    results += "{$1}$0";
    rv = results;
    ``
endsnippet

snippet `M([1-9])x([1-9])([ d])` "matrix" A
``rv = '\\left(\\begin{array}{' + 'c'.repeat(m[2]) + '}'``
``count = 1;
msg = '';
diag = (m[3] == 'd');

for (i=0; i < parseInt(m[1],10); i++) {
  diag && (i!=0) ? msg += '0' : msg += '${' + count + ':0}';
  count++;
  for (j=1; j < parseInt(m[2],10); j++) {
    diag && (i!=j) ? msg += ' & 0' : msg += ' & ${' + count + ':0}';
    count++;
  }
  if (i != parseInt(m[1],10)-1) {
    msg += ' \\\\\\ \n';
  }
}
rv = msg;``
\\end{array}\\right)
endsnippet 

snippet `vec([1-9])` "column vector" A
``rv = '\\begin{bmatrix}'``
``count=2;
msg = '${1:0}';
for (i = 1; i < parseInt(m[1],10); i++) {
  msg += ' \\\\\\ \n${' + count + ':0}';
  count++;
}
rv = msg;
``
\\end{bmatrix}
endsnippet

context math(context)
snippet `([a-zA-Z])([0-9]+) ` "underset" A
``if ( m[2].length == 1 ) { a = '_'; b = ' '; }
  else { a = '_{'; b = '} '; }
  rv = m[1] + a + m[2] + b``
endsnippet

context math(context)
snippet `(\\?\w+)(,\.|\.,)` "vector" A
``rv = '\\vec{' + m[1] + '}'``
endsnippet

context math(context)
snippet `\b([a-zA-Z])bar\b` "bar" A
``rv = '\\bar{' + m[1] + '}'``
endsnippet

context math(context)
snippet `\b([a-zA-Z])-hat\b` "hat" A
``rv = '\\hat{' + m[1] + '}'``
endsnippet

context math(context)
snippet `\b([a-zA-Z])cal\b` "cal" A
``rv = '\\mathcal{' + m[1] + '}'``
endsnippet

context math(context)
snippet `([A-Z])#` "bb" A
``rv = '\\mathbb{' + m[1] + '}'``
endsnippet

snippet mk "inline math" A
\\( $1 \\)``if (t[1] && ",-.?: )]".indexOf(t[1][0]) >= 0) { rv = '' } else { rv = ' ' }``$2
endsnippet

snippet dmk "displayk math" A
\\[ $1 \\]``if (t[1] && ",-.?: )]".indexOf(t[1][0]) >= 0) { rv = '' } else { rv = ' ' }``$2
endsnippet

```

context math(context)
snippet `(?<![\\a-zA-Z])([a-zA-Z])\1{1}(?![a-zA-Z])` "greek letters" A
``transliteration = {"a": "\\alpha", "b": "\\beta", "g": "\\gamma", "G": "\\Gamma", "d": "\\delta", "D": "\\Delta", "e": "\\epsilon", "E": "\\varepsilon", "z": "\\zeta", "h": "\\eta", "t": "\\theta", "T": "\\Theta", "k": "\\kappa", "i": "\\iota", "l": "\\lambda", "L": "\\Lambda", "m": "\\mu", "n": "\\nu", "x": "\\xi", "X": "\\Xi", "p": "\\pi", "P": "\\Pi", "r": "\\rho", "s": "\\sigma", "S": "\\Sigma", "o": "\\omega", "O": "\\Omega", "c": "\\chi", "f": "\\phi", "F": "\\Phi", "y": "\\upsilon", "Y": "\\Upsilon", "v": "\\psi", "V": "\\Psi", "u": "\\tau" };
rv = (transliteration[m[1]] || (m[1] + m[1]))``
endsnippet

context math(context)
snippet -> "to" A
``rv = '\\to'``
endsnippet

context math(context)
snippet !> "mapsto" A
``rv = '\\mapsto'``
endsnippet

context math(context)
snippet @@ "infinity" A
``rv = '\\infty'``
endsnippet

context math(context)
snippet `([a-zA-Z0-9])td` "exponentiation" A
``rv = m[1] + '^{$1}'``
endsnippet

context math(context)
snippet `\b(d|D)(\\?\w+)[dD](\w{1}|\\\w+) ` "derivatives" A
``
if (m[1] == 'd') 
  rv = '\\frac{\\partial ' + m[2] + '}{\\partial ' + m[3] + '}';
else 
  rv = '\\frac{\\mathrm{d' + m[2] + '}}{\\mathrm{d' + m[3] + '}}';
``
endsnippet

context math(context)
snippet `=>` "implies" A
`` rv = '\\Rightarrow' ``
endsnippet

context math(context)
snippet `=<` "implied by" A
``rv = '\\Leftarrow'``
endsnippet

context math(context)
snippet `==` "equals" A
``rv = '&= $1 \\\\\\'``
endsnippet

context math(context)
snippet `<=` "leq" A
``rv = '\\leq'``
endsnippet

context math(context)
snippet `>=` "geq" A
``rv = '\\geq'``
endsnippet

context math(context)
snippet xnn "x_n"
``rv = 'x_n' ``
endsnippet

context math(context)
snippet `([\\?a-zA-Z]+)->([\\?a-zA-Z]+) ` A
``rv = '$1 \\xrightarrow[' + m[1] + ' \\to ' + m[2].replace('inf', '\\infty') + ']{} $2'`` 
endsnippet

context math(context)
snippet `lim_([\\?a-zA-Z]+)_([\\?a-zA-Z]+) ` A
``rv = '\\lim_{' + m[1] + ' \\to ' + m[2].replace('inf', '\\infty') + '} '``
endsnippet

snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{textcomp}
\usepackage[dutch]{babel}
\usepackage{amsmath, amssymb}


% figure support
\usepackage{import}
\usepackage{xifthen}
\pdfminorversion=7
\usepackage{pdfpages}
\usepackage{transparent}
\newcommand{\incfig}[1]{%
	\def\svgwidth{\columnwidth}
	\import{./figures/}{#1.pdf_tex}
}

\pdfsuppresswarningpagegroup=1

\begin{document}
	$0
\end{document}
endsnippet
